using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnergyHandler : MonoBehaviour
{
    public static Int64 consume;
    public static Int64 available;
    private static bool currentPowerOutage;

    public static List<Building> powerPlants = new List<Building>();
    public static List<Building> consumerBuilding = new List<Building>();

    public static EnergyHandler instance;


    private void Awake()
    {
        instance = this;
    }

    public static void init()
    {

    }

    public static void updateCall()
    {
        available = getAvailableEnergy();
        consume = getEnergyConsume();

        handlePowerOutage();
    }

    /// <summary>
    /// Calculates the amount of electricity generated by all power plants.
    /// </summary>
    /// <returns>Total generated energy.</returns>
    public static Int64 getAvailableEnergy()
    {
        int tmpEnergy = 0;

        Building[] buildings = powerPlants.ToArray();
        for (int i = 0; i < buildings.Length; i++)
        {
            if (buildings[i].IsActivated && buildings[i].energy_Production_Consuming > 0)
                tmpEnergy += buildings[i].energy_Production_Consuming;
        }
        return tmpEnergy;
    }

    /// <summary>
    /// Calculates the electricity consumed by all activated buildings with energy consume.
    /// </summary>
    /// <returns>Total energy consume.</returns>
    public static Int64 getEnergyConsume()
    {
        int tmpEnergy = 0;

        Building[] buildings = consumerBuilding.ToArray();
        for (int i = 0; i < buildings.Length; i++)
        {
            if (buildings[i].IsActivated && buildings[i].energy_Production_Consuming < 0)
                tmpEnergy += Math.Abs(buildings[i].energy_Production_Consuming);
        }
        return tmpEnergy;
    }

    public static void handlePowerOutage()
    {
        if (!currentPowerOutage && consume > available)//start power outage when not enough energy available
        {
            Debug.Log("Power outage!!!");
            //Turn off the electricity in all buildings that consume it.
            Int64 tmpConsume = consume;
            for (int i = 0; i < consumerBuilding.Count; i++)
            {
                if (consumerBuilding[i].IsActivated && consumerBuilding[i].HasEnergy)
                {
                    consumerBuilding[i].HasEnergy = false;
                    consume -= consumerBuilding[i].energy_Production_Consuming;
                }

                if (consume <= available)
                    break;
            }

            currentPowerOutage = true;
        }
        else if(currentPowerOutage)//activate power in all building when enough energy
        {
            int theoreticalEnergy = 0;

            //sum theoretical energy consume
            Building[] buildings = consumerBuilding.ToArray();
            for (int i = 0; i < buildings.Length; i++)
            {
                if (buildings[i].IsActivated && buildings[i].energy_Production_Consuming < 0)
                    theoreticalEnergy += Math.Abs(buildings[i].energy_Production_Consuming);
            }

            //enable energy in all buildings
            if(theoreticalEnergy <= available)
            {
                for (int i = 0; i < consumerBuilding.Count; i++)
                    if (consumerBuilding[i].IsActivated && !consumerBuilding[i].HasEnergy)
                        consumerBuilding[i].HasEnergy = true;

                Debug.Log("power outage ends!");
                currentPowerOutage = false;
            }
        }
    }




    public static void registerBuilding(Building newBuilding)
    {
        if (newBuilding.energy_Production_Consuming > 0)//when building generates energy
        {
            powerPlants.Add(newBuilding);

            newBuilding.HasEnergy = true;
        }
        else if (newBuilding.energy_Production_Consuming < 0)//when building consumes energy 
        {
            consumerBuilding.Add(newBuilding);

            newBuilding.HasEnergy = true;

            //Check enough energy available
            //if (consume + newBuilding.energy_Production_Consuming > available)
            //    newBuilding.HasEnergy = false;
            //else
            //    newBuilding.HasEnergy = true;
        }
    }

    public static void deregisterBuilding(Building removeBuilding)
    {
        if (removeBuilding.energy_Production_Consuming > 0)//when building generates energy
            powerPlants.Remove(removeBuilding);
        else if (removeBuilding.energy_Production_Consuming < 0)//when building consumes energy
            consumerBuilding.Remove(removeBuilding);
    }

}
